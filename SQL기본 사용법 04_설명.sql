# order by : 조회한 결과를 정렬해서 표시
# ASC : 오름차순 정렬 (기본값)
# DESC : 내림차순 정렬
# 정렬의 기준이 2개까지는 정렬이 잘되어 있는 형태로
# 출력이 되지만 3개 이상이 되면 정렬이 잘되지 않음
# order by 사용 시 먼저 입력된 컬럼이 정렬의
# 우선 순위가 높아서 발생하는 문제임

# select 컬럼1, 컬럼2 ... from 테이블
# where 검색 조건 order by 컬럼1, 컬럼2, asc|desc


# SELECT 문 입력 시 컬럼명 사용하기
# 사용자가 원하는 형태의 데이터만 출력
# 출력할 컬럼명만 입력 시 입력한 컬럼명의 데이터만
# 출력을 함 ( * 을 사용 시 모든 컬럼 출력)
# 기존 프로그램과 연동 시 컬럼명을 입력한 순서대로
# 데이터 구조에 입력 됨


# LIMIT : 출력할 데이터의 개수를 제한하는 명령어
# 주로 게시판에 많이 사용됨
# select 컬럼1, 컬럼2, ... from 테이블
# where 검색조건 limit 개수
# where 검색조건 limit 시작번호, 개수


# 와일드카드 문자 : SQL에서 사용한 문자열에서
# 하나 이상의 다른 문자로 변환되는 문자
# _ : 임의의 문자 1개로 변환
# % : 임의의 문자 임의의 개수로 변환
# %는 문자의 수가 0 ~ 1개 이상

# LIKE : where 절에서 검색 패턴을 생성할 때 사용
# 와일드카드 문자와 함께 사용하여 검색어를 생성
# select 컬럼1, 컬럼2, ... from 테이블
# where 검색조건 like '_검_색_어_';
# where 검색조건 like '%검%색%어%';


# between : 지정한 범위내의 값을 출력하는 명령
# and 명령만 사용하여 between을 구현할 수 있음
# select 컬럼1, 컬럼2, ... from 테이블
# where 검색조건 between 시작범위 and 끝범위


# min(), max() : 지정한 컬럼의 최소, 최대값 출력
# select 절에 사용함,
# 함수의 매개변수로 컬럼명을 입력
# select min(컬럼) from 테이블
# select max(컬럼) from 테이블

# count(), avg(), sum()
# count() : 지정한 조건에 맞는 값의 수를 출력
# select count(컬럼) from 테이블 where 검색조건

# avg() : 숫자열의 평균값을 출력
# select avg(컬럼) from 테이블 where 검색조건

# sum() : 숫자열의 총합을 출력
# select sum(컬럼) from 테이블 where 검색조건


# AS : 지정한 컬럼 및 테이블의 이름을 변경
# as 는 join 명령을 사용할때 주로 사용함
# 2개 이상의 테이블을 조합하여 결과를 출력할 경우
# 해당하는 테이블 및 컬럼의 이름을 알아보기 쉽게
# 표시하는 효과가 있음

# select 절의 컬럼명을 입력 시 정식 입력 방식은
# select 테이블명.컬럼명 from 테이블명

# as 사용시 변경된 테이블명.컬럼명으로 표시
# select 변경된테이블명.컬럼명
# from 테이블명 as 변경된 테이블명


# JOIN : 여러 테이블을 조합하여 데이터를 하나의
# 열로 표현한 것
# 여러 테이블을 연결하여 데이터를 검색
# 기본키와 참조키로 연결된 테이블을 검색

# ON : join 사용 시 각 테이블의 중복되는 값이
# 동일하다는 것을 표기하기 위한 명령

# INNER JOIN : 기본, JOIN이라고 표현, 교집합
# 2개 이상의 테이블에서 모두 존재하는 데이터를
# 출력하는 방식

# select 왼쪽테이블.컬럼1, 왼쪽테이블.컬럼2, ...
# 오른쪽테이블.컬럼1, 오른쪽테이블.컬럼2, ...
# from 왼쪽테이블
# join 오른쪽테이블
# on 왼쪽테이블.기본키컬럼 = 오른쪽테이블.참조키컬럼
# and 검색조건


# LEFT JOIN : LEFT OUTER JOIN, 왼쪽 테이블의
# 모든 값과 중복되는 오른쪽 테이블의 값 출력
# 왼쪽 테이블에는 있으나 오른쪽 테이블에는 없는
# 데이터는 화면에 출력되지 않음 (null 처리)

# RIGHT JOIN : TIGHT OUTER JOIN, 오른쪽 테이블의
# 모든 값과 중복되는 왼쪽 테이블의 값 출력
# 오른쪽 테이블에는 있으나 왼쪽 테이블에는 없는
# 데이터는 화면에 출력되지 않음 (null 처리)

# FULL OUTER JOIN : 합집합, 두 테이블의 모든 값 출력


# 3개의 테이블에서 데이터를 조회하는 방법
# JOIN을 2번 사용하고 a 테이블과 b 테이블의
# 을 이어주고, b 테이블과 c 테이블을 이어주면 됨





